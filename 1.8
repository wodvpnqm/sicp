#lang sicp

(define (square x) (* x x))

(define (cube x) (* x x x))
(define (improve guess x)(/ (+ (/ x (square guess)) (* 2 guess)) 3))
(define (good-enough? guess x) (< (/ (abs (- guess (improve guess x))) guess) 0.0001))
(define (subtriplicate-iter guess x)
  (if (good-enough? guess x) guess (subtriplicate-iter (improve guess x) x)))
(define (subtriplicate x)
  (subtriplicate-iter 1.0 x))
